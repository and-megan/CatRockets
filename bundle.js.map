{"version":3,"sources":["webpack:///webpack/bootstrap 02f885eb96da9051b1e6","webpack:///./lib/catastrophe.js","webpack:///./lib/game.js","webpack:///./lib/space.js","webpack:///./lib/ship.js","webpack:///./lib/util.js","webpack:///./lib/constants.js","webpack:///./lib/planet.js","webpack:///./lib/gameView.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACXA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;ACrCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;;AAEA;;;;;;;AC7EA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAgC;AAChC;;AAEA;AACA,mCAAkC;AAClC;;AAEA;;AAEA;AACA;;;;;;;ACzCA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpBA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACvBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 02f885eb96da9051b1e6\n **/","var Game = require('./game.js'),\nGameView = require('./gameView.js');\n\nvar element = document.getElementById('game-canvas');\n\nvar ctx = element.getContext(\"2d\");\n\nvar game = new Game;\nvar gameView = new GameView(game, ctx);\n\ngameView.start();\n// TODO: define initiate new and bind it to a button (make the menu in general)\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/catastrophe.js\n ** module id = 0\n ** module chunks = 0\n **/","var Space = require('./space.js');\n\nclass Game {\n  constructor() {\n    this.level = 1;\n    this.bigBang(this.level);\n  }\n\n  bigBang(level) {\n    this.space = new Space(level);\n  }\n\n  step() {\n\n// needs a check for last level victory - game won't end until you're dead at this point\n    if (this.space.won) {\n      this.level++;\n      this.bigBang(this.level);\n    }\n\n    if (this.space.dead) {\n      this.gameOver();\n    }\n\n    this.space.step();\n  }\n\n  gameOver() {\n    // display losing message, go back to menu, etc.\n    console.log(\"Game over!\");\n  }\n\n  draw(ctx) {\n    this.space.draw(ctx);\n  }\n}\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game.js\n ** module id = 1\n ** module chunks = 0\n **/","var Ship = require('./ship.js'),\n  Planet = require('./planet.js'),\n    Goal = require('./planet.js'),\n    Util = require('./util.js'),\nCONSTANTS = require('./constants.js');\n\nclass Space {\n  constructor(level) {\n    this.level = level;\n    this.dead = false;\n    this.won = false;\n    this.ship = new Ship(\n      CONSTANTS.shipRadius,\n      CONSTANTS.shipStartPos\n    );\n    this.planets = this.bigBang(level);\n    this.goal = this.cleanLitterBox(level);\n  }\n\n  step() {\n    if (this.dead || this.won) {\n      return;\n    }\n\n    this.planets.forEach((obj) => {\n      if (this.ship.isCollided(obj)) {\n        this.ship.catastrophe();\n        this.dead = true;\n      }\n    });\n\n    if (this.ship.isCollided(this.goal)) {\n      this.ship.victoryDance();\n      this.won = true;\n    }\n  }\n\n  launch() {\n    this.ship.launch();\n  }\n\n  bigBang(level) {\n    var planets = [];\n    switch (level) {\n      case 1:\n        planets.push(\n          new Planet({\n            density: 0,\n            radius: 20,\n            hue: 0,\n            pos: CONSTANTS.levelOnePlanet\n          })\n        );\n        break;\n    }\n    return planets;\n  }\n\n  cleanLitterBox(level) {\n    return new Goal({\n      density: 0,\n      radius: 20,\n      hue: 0,\n      pos: CONSTANTS.levelOneGoal\n    });\n  }\n\n  draw(ctx) {\n    this.ship.draw(ctx);\n    this.goal.draw(ctx);\n    this.planets.forEach( (planet) => {\n      planet.draw(ctx);\n    });\n  }\n\n}\n\nmodule.exports = Space;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/space.js\n ** module id = 2\n ** module chunks = 0\n **/","var Util = require('./util.js');\n\nclass Ship {\n  // inherit from Planet? will require a gravitational pull\n  //this will require a mass to calculate gravitational pull\n  constructor(radius, pos) {\n    this.radius = radius;\n    this.pos = pos;\n  }\n\n  launch() {\n\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = 'rgb(100,100,100)';\n    ctx.beginPath();\n    var [x, y] = this.pos;\n    ctx.arc(x, y ,this.radius,0,2*Math.PI);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  isCollided(obj) {\n    var dist = Util.calculate_distance(this.pos, obj.pos);\n    //is dist less than or equal to the sum of the two radii\n    return dist <= (this.radius + obj.radius);\n  }\n\n  catastrophe() {\n    // set animation for boom-boom, sound? etc.\n    console.log(\"ship is dead\"); // testing purposes\n  }\n\n  victoryDance() {\n    console.log(\"level complete\"); //testing purposes\n  }\n\n}\n\nmodule.exports = window.Ship = Ship;\n// TODO: take off window\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/ship.js\n ** module id = 3\n ** module chunks = 0\n **/","Util = {\n    gravitationalForce(obj1, obj2){\n    //this needs to be calculated for every single object and then the difference will be used to determine how much the objects will shift\n\n    //return Force of Attraction (N) between two objects with Universal Gravitation Equation: F = GMm/R2\n\n    var gravConstant = 6.674 * Math.pow(10, -11);\n    var separation = this.calculateDistance(obj1.pos, obj2.pos);\n    var mass1 = obj1.mass;\n    var mass2 = obj2.mass;\n    return (gravConstant * mass1 * mass2) / (Math.pow(separation, 2));\n  },\n\n  calculate_distance(pos1, pos2) {\n    var xDiff = pos2[0] - pos1[0];\n    var yDiff = pos2[1] - pos1[1];\n    return (Math.sqrt(Math.pow(xDiff, 2) + Math.pow(yDiff, 2)));\n  }\n};\n\nmodule.exports = Util;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util.js\n ** module id = 4\n ** module chunks = 0\n **/","var Constants = {\n  shipRadius: 20,\n  shipStartPos: [ 50, 550 ],\n\n  levelOnePlanet: [ 300, 300 ],\n  levelOneGoal: [ 550, 50 ]\n};\n\nmodule.exports = Constants;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/constants.js\n ** module id = 5\n ** module chunks = 0\n **/","class Planet {\n  constructor(options) {\n    this.density = options.density;\n    this.radius = options.radius;\n    this.hue = options.hue;\n    this.pos = options.pos;\n    this.volume = (4/3) * 3.14 * Math.pow(this.radius, 3);\n    //mass for gravity calculations\n    this.mass = this.volume * this.density;\n  }\n\n  draw(ctx) {\n    var [x, y] = this.pos;\n\n    ctx.fillStyle = 'rgb(100,100,50)';\n    ctx.beginPath();\n    ctx.arc(x, y ,this.radius,0,2*Math.PI);\n    ctx.closePath();\n    ctx.fill();\n  }\n}\n\nmodule.exports = window.Planet = Planet;\n// TODO: take off window\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/planet.js\n ** module id = 6\n ** module chunks = 0\n **/","class GameView {\n  constructor(game, ctx) {\n    this.game = game;\n    this.ctx = ctx;\n  }\n\n  start() {\n    this.bindClick();\n    this.interval = setInterval(this.loop.bind(this), 10);\n  }\n\n  bindClick() {\n    window.addEventListener('click', this.game.launch());\n  }\n\n  loop() {\n\n    this.game.step();\n    this.game.draw(this.ctx);\n  }\n}\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/gameView.js\n ** module id = 7\n ** module chunks = 0\n **/"],"sourceRoot":""}